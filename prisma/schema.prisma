// Prisma schema for eSalaire application

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  identifier     String          @unique
  password       String
  firstName      String
  lastName       String
  email          String          @unique
  department     String
  position       String
  createdAt      DateTime        @default(now())
  
  bulletins      Bulletin[]
  connectionLogs ConnectionLog[]
  
  @@map("users")
}

model Bulletin {
  id               String            @id @default(uuid())
  userId           String
  title            String
  period           String
  date             DateTime
  fileSize         String
  status           String            @default("available")
  
  // Employee information
  employeeNumber   String
  employeeName     String
  department       String
  position         String
  category         String
  
  // Salary totals
  grossSalary      Float
  totalDeductions  Float
  netSalary        Float
  
  createdAt        DateTime          @default(now())
  
  // Relations
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  salaryComponents SalaryComponent[]
  deductions       Deduction[]
  
  @@map("bulletins")
  @@index([userId])
}

model SalaryComponent {
  id         String   @id @default(uuid())
  bulletinId String
  label      String
  base       Float
  rate       Float
  amount     Float
  
  bulletin   Bulletin @relation(fields: [bulletinId], references: [id], onDelete: Cascade)
  
  @@map("salary_components")
  @@index([bulletinId])
}

model Deduction {
  id         String   @id @default(uuid())
  bulletinId String
  label      String
  amount     Float
  
  bulletin   Bulletin @relation(fields: [bulletinId], references: [id], onDelete: Cascade)
  
  @@map("deductions")
  @@index([bulletinId])
}

model ConnectionLog {
  id        String   @id @default(uuid())
  userId    String
  timestamp DateTime @default(now())
  ipAddress String?
  userAgent String?  @db.Text
  success   Boolean  @default(true)
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("connection_logs")
  @@index([userId])
}
